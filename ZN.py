# ==================== Telegram Bot: Dating and Messaging ====================
# –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
# –í–∫–ª—é—á–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏,
# —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –∂–∞–ª–æ–±—ã,
# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏,
# –∞ —Ç–∞–∫–∂–µ —Å–∏—Å—Ç–µ–º—É –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤.

import logging
import aiosqlite
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaDocument,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext,
)
import asyncio
import time
from collections import defaultdict
import re

# ==================== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ nest_asyncio ====================
# –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ —Å—Ä–µ–¥–µ —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π.
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass  # –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ

# ==================== –¢–æ–∫–µ–Ω –ë–æ—Ç–∞ ====================
TOKEN = "7143620102:AAGhjfFixqiJE6xGAzTo9aBns_NA-_th95E"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather

# ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ====================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ INFO
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—Ç 'httpx'
logging.getLogger("httpx").setLevel(logging.WARNING)

# ==================== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ====================
REGISTER = 1
SEND_MESSAGE = 2
SET_MODE = 3
SELECT_RECIPIENT = 4
SET_USERNAME_VISIBILITY = 5
REPLY_MESSAGE = 6
SET_PROFILE_PHOTO = 10
TOGGLE_PROFILE_VISIBILITY = 7

# ==================== –ê–¥–º–∏–Ω ID ====================
ADMIN_ID = 1753361154  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# ==================== –ü—É—Ç—å –∫ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö ====================
DB_PATH = 'users.db'

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ====================
async def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã users, messages, rankings, matches, blocks –∏ likes, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT UNIQUE NOT NULL,
                interests TEXT,
                anonymous_mode BOOLEAN DEFAULT 0,
                show_username BOOLEAN DEFAULT 1,
                profile_photo TEXT,
                profile_visible BOOLEAN DEFAULT 1
            )
        ''')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ profile_visible, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor = await db.execute("PRAGMA table_info(users);")
        columns = await cursor.fetchall()
        column_names = [column[1] for column in columns]
        if 'profile_visible' not in column_names:
            await db.execute("ALTER TABLE users ADD COLUMN profile_visible BOOLEAN DEFAULT 1;")
            await db.commit()
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                message_id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER NOT NULL,
                receiver_id INTEGER NOT NULL,
                message TEXT,
                media_type TEXT,
                media_id TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(sender_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY(receiver_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS rankings (
                user_id INTEGER PRIMARY KEY,
                sent_messages INTEGER DEFAULT 0,
                received_messages INTEGER DEFAULT 0,
                likes INTEGER DEFAULT 0,
                dislikes INTEGER DEFAULT 0,
                FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS matches (
                user1_id INTEGER,
                user2_id INTEGER,
                match_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user1_id, user2_id),
                FOREIGN KEY(user1_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY(user2_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS blocks (
                blocked_user_id INTEGER,
                blocked_by INTEGER,
                block_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (blocked_user_id, blocked_by),
                FOREIGN KEY(blocked_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY(blocked_by) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                liker_id INTEGER,
                liked_id INTEGER,
                like_type TEXT,  -- 'like' –∏–ª–∏ 'dislike'
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (liker_id, liked_id),
                FOREIGN KEY(liker_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY(liked_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# ==================== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –í–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ====================
def is_valid_message(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    forbidden_words = ['spam', 'malware', 'phishing']
    if text and not text.strip():
        return False
    if text:
        for word in forbidden_words:
            if re.search(rf'\b{word}\b', text, re.IGNORECASE):
                return False
    return True

# ==================== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –°–æ–æ–±—â–µ–Ω–∏–π (–¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥) ====================
message_timestamps = defaultdict(list)
RATE_LIMIT = 20  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π
TIME_WINDOW = 60  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."""
    current_time = time.time()
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    message_timestamps[user_id] = [
        timestamp for timestamp in message_timestamps[user_id]
        if current_time - timestamp < TIME_WINDOW
    ]
    if len(message_timestamps[user_id]) >= RATE_LIMIT:
        return False
    message_timestamps[user_id].append(current_time)
    return True

# ==================== –ö–æ–º–∞–Ω–¥–∞ /start ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª /start.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT * FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if result:
            await update.message.reply_text(
                f"üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {result[1]}.\n\n"
                "‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/send - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "/send_anonymous - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/set_mode - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "/set_username_visibility - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞\n"
                "/toggle_profile_visibility - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "/rankings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/myrank - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
            )
            return ConversationHandler.END
    
    # –ó–∞–ø—Ä–æ—Å —é–∑–µ—Ä–Ω–µ–π–º–∞
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @myusername)."
    )
    return REGISTER

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====================
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    username = (update.message.text or "").strip()
    
    if not username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return REGISTER
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT * FROM users WHERE username = ?", (username,))
        result = await cursor.fetchone()
        if result:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return REGISTER
    
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await db.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user.id, username))
            await db.execute("INSERT INTO rankings (user_id) VALUES (?)", (user.id,))
            await db.commit()
            await update.message.reply_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {username}.\n\n"
                "‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "‚ú® –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/set_mode\n"
                "‚ú® –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/add_interests –∏–Ω—Ç–µ—Ä–µ—Å1, –∏–Ω—Ç–µ—Ä–µ—Å2\n"
                "‚ú® –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/set_username_visibility\n"
                "‚ú® –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/toggle_profile_visibility\n"
                "‚ú® –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/set_profile_photo"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {username}.")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

# ==================== –ü–æ–ª—É—á–µ–Ω–∏–µ –ò–Ω–ª–∞–π–Ω –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ====================
async def get_users_keyboard(exclude_user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("""
            SELECT user_id, username, show_username 
            FROM users 
            WHERE user_id != ? 
              AND profile_visible = 1
              AND user_id NOT IN (
                  SELECT blocked_user_id FROM blocks WHERE blocked_by = ?
              )
              AND ? NOT IN (
                  SELECT blocked_by FROM blocks WHERE blocked_user_id = ?
              )
        """, (exclude_user_id, exclude_user_id, exclude_user_id, exclude_user_id))
        users = await cursor.fetchall()
    
    if not users:
        return InlineKeyboardMarkup([[InlineKeyboardButton("üîï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='no_users')]])
    
    buttons = []
    for user in users:
        user_id, username, show_username = user
        display_name = username if show_username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        buttons.append([
            InlineKeyboardButton(display_name, callback_data=f"send_{user_id}"),
            InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_{user_id}")
        ])
    
    return InlineKeyboardMarkup(buttons)

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –û—Ç–ø—Ä–∞–≤–∫–∏ –°–æ–æ–±—â–µ–Ω–∏–π ====================
async def handle_send_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    if query is None:
        return ConversationHandler.END
    
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('send_'):
        # –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        target_user_id = int(data.split('send_')[1])
        context.user_data['target_user_id'] = target_user_id
        await query.message.reply_text(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç):")
        return SEND_MESSAGE
    else:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return ConversationHandler.END

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –ü—Ä–æ—Ñ–∏–ª—è ====================
async def handle_view_profile_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    if query is None:
        return
    
    await query.answer()
    
    data = query.data
    if not data.startswith('view_'):
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    target_user_id = int(data.split('view_')[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username, interests, show_username, profile_photo FROM users WHERE user_id = ?", (target_user_id,))
        target_info = await cursor.fetchone()
        if not target_info:
            await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç.")
            return
        target_username, interests, show_username, profile_photo = target_info
        if not show_username:
            display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}"
        else:
            display_name = target_username
        interests = interests if interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        photo_text = f"üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –î–∞" if profile_photo else "üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –ù–µ—Ç"
    
    profile_message = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üîπ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {display_name}\n"
        f"üîπ <b>ID:</b> {target_user_id}\n"
        f"üîπ <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {interests}\n"
        f"{photo_text}\n\n"
        f"üì¨ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /send –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
    )
    
    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_{target_user_id}")],
        [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"hide_profile_{target_user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if profile_photo:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –Ω–∞–ø—Ä—è–º—É—é
        try:
            await query.message.reply_photo(
                photo=profile_photo,
                caption=profile_message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
            await query.message.reply_text(profile_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await query.message.reply_text(profile_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ó–∞–∫—Ä—ã—Ç–∏—è –ü—Ä–æ—Ñ–∏–ª—è –∏–∑ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ ====================
async def handle_hide_profile_from_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    if query is None:
        return
    
    await query.answer()
    
    data = query.data
    if not data.startswith('hide_profile_'):
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    target_user_id = int(data.split('hide_profile_')[1])
    user_id = query.from_user.id
    
    if target_user_id != user_id:
        await query.message.reply_text("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    # –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await db.execute("UPDATE users SET profile_visible = 0 WHERE user_id = ?", (user_id,))
        await db.commit()
    
    await query.message.reply_text("üîí –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –†–µ–∂–∏–º–∞ ====================
async def handle_set_mode_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    if query is None:
        return
    
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == 'mode_anonymous':
        await set_mode(update, context, anonymous=True)
    elif data == 'mode_non_anonymous':
        await set_mode(update, context, anonymous=False)
    else:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞.")
    
    return ConversationHandler.END

# ==================== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –†–µ–∂–∏–º–∞ –û—Ç–ø—Ä–∞–≤–∫–∏ –°–æ–æ–±—â–µ–Ω–∏–π ====================
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, anonymous: bool) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user = update.effective_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await db.execute("UPDATE users SET anonymous_mode = ? WHERE user_id = ?", (int(anonymous), user.id))
        await db.commit()
    
    mode_text = "üï∂Ô∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π" if anonymous else "üìù –ù–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π"
    await query.message.reply_text(f"‚ú® –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: **{mode_text}**", parse_mode=ParseMode.MARKDOWN)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞: {mode_text}")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /set_username_visibility ====================
async def set_username_visibility_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /set_username_visibility –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–π —é–∑–µ—Ä–Ω–µ–π–º", callback_data='show_username')],
        [InlineKeyboardButton("‚ùå –°–∫—Ä—ã—Ç—å –º–æ–π —é–∑–µ—Ä–Ω–µ–π–º", callback_data='hide_username')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ú® –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup=reply_markup)
    return SET_USERNAME_VISIBILITY

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –í–∏–¥–∏–º–æ—Å—Ç–∏ –Æ–∑–µ—Ä–Ω–µ–π–º–∞ ====================
async def handle_username_visibility_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞."""
    query = update.callback_query
    if query is None:
        return
    
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == 'show_username':
        show = True
    elif data == 'hide_username':
        show = False
    else:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await db.execute("UPDATE users SET show_username = ? WHERE user_id = ?", (int(show), user.id))
        await db.commit()
    
    status = "‚úÖ –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." if show else "‚ùå –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await query.message.reply_text(status)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª show_username = {show}.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /toggle_profile_visibility ====================
async def toggle_profile_visibility_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /toggle_profile_visibility –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT profile_visible FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return ConversationHandler.END
        profile_visible = bool(result[0])
    
    if profile_visible:
        # –ü—Ä–æ—Ñ–∏–ª—å –≤–∏–¥–∏–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫—Ä—ã—Ç—å
        keyboard = [
            [InlineKeyboardButton("üîí –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='hide_profile')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        status = "‚ú® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **–≤–∏–¥–∏–º**. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –µ–≥–æ —Å–∫—Ä—ã—Ç—å?"
    else:
        # –ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å
        keyboard = [
            [InlineKeyboardButton("üîì –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='show_profile')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        status = "‚ú® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **—Å–∫—Ä—ã—Ç**. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å?"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(status, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    return TOGGLE_PROFILE_VISIBILITY

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–∏–¥–∏–º–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∏–ª—è ====================
async def handle_toggle_profile_visibility_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    if query is None:
        return ConversationHandler.END
    
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == 'hide_profile':
        new_visibility = 0
        status = "üîí –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    elif data == 'show_profile':
        new_visibility = 1
        status = "üîì –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    elif data == 'cancel':
        await query.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END
    else:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await db.execute("UPDATE users SET profile_visible = ? WHERE user_id = ?", (new_visibility, user.id))
        await db.commit()
    
    await query.message.reply_text(status)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–∑–º–µ–Ω–∏–ª –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ {new_visibility}.")
    return ConversationHandler.END

# ==================== –ö–æ–º–∞–Ω–¥–∞ /send ====================
async def send_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /send –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await update.message.reply_text(
        "üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=await get_users_keyboard(exclude_user_id=update.message.from_user.id)
    )
    return SELECT_RECIPIENT

# ==================== –ö–æ–º–∞–Ω–¥–∞ /send_anonymous ====================
async def send_anonymous_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /send_anonymous –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await update.message.reply_text(
        "üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=await get_users_keyboard(exclude_user_id=update.message.from_user.id)
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
    context.user_data['send_anonymous'] = True
    return SELECT_RECIPIENT

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –û—Ç–ø—Ä–∞–≤–∫–∏ –°–æ–æ–±—â–µ–Ω–∏–π ====================
async def send_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º."""
    user = update.message.from_user
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ (caption)
    message_text = (update.message.text or update.message.caption or "").strip()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞
    has_media = False
    if update.message.photo or update.message.video or update.message.document or update.message.voice or update.message.video_note:
        has_media = True
    
    if not message_text and not has_media:
        await update.message.reply_text("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞.")
        return SEND_MESSAGE
    
    if message_text:
        if not is_valid_message(message_text):
            await update.message.reply_text("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.")
            return SEND_MESSAGE
    
    target_user_id = context.user_data.get('target_user_id')
    if not target_user_id:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT anonymous_mode, username FROM users WHERE user_id = ?", (user.id,))
        user_mode = await cursor.fetchone()
        if not user_mode:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return ConversationHandler.END
        anonymous = bool(user_mode[0])
        username = user_mode[1]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT username, show_username FROM users WHERE user_id = ?", (target_user_id,))
        target_info = await cursor.fetchone()
        if not target_info:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return ConversationHandler.END
        target_username, show_username = target_info
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT * FROM blocks WHERE blocked_user_id = ? AND blocked_by = ?", (user.id, target_user_id))
        is_blocked = await cursor.fetchone()
        if is_blocked:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.")
            return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    media_type = None
    media_id = None
    if update.message.photo:
        media_type = 'photo'
        media_id = update.message.photo[-1].file_id  # –°–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    elif update.message.document:
        media_type = 'document'
        media_id = update.message.document.file_id
    elif update.message.video:
        media_type = 'video'
        media_id = update.message.video.file_id
    elif update.message.voice:
        media_type = 'voice'
        media_id = update.message.voice.file_id
    elif update.message.video_note:
        media_type = 'video_note'
        media_id = update.message.video_note.file_id
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /send_anonymous –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º
    # –ò–Ω–∞—á–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    send_anonymous = context.user_data.get('send_anonymous', False)
    if send_anonymous:
        anonymous = True
        context.user_data['send_anonymous'] = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ display_name
    if anonymous:
        display_name = "üï∂Ô∏è –ê–Ω–æ–Ω–∏–º"
    else:
        display_name = username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if media_type and media_id:
            if media_type == 'photo':
                sent_message = await context.bot.send_photo(
                    chat_id=target_user_id,
                    photo=media_id,
                    caption=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'document':
                sent_message = await context.bot.send_document(
                    chat_id=target_user_id,
                    document=media_id,
                    caption=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'video':
                sent_message = await context.bot.send_video(
                    chat_id=target_user_id,
                    video=media_id,
                    caption=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'voice':
                sent_message = await context.bot.send_voice(
                    chat_id=target_user_id,
                    voice=media_id,
                    caption=f"<b>üì© –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'video_note':
                sent_message = await context.bot.send_video_note(
                    chat_id=target_user_id,
                    video_note=media_id,
                    caption=f"<b>üì© –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
        else:
            sent_message = await context.bot.send_message(
                chat_id=target_user_id,
                text=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                ])
            )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("PRAGMA foreign_keys = ON;")
            await db.execute(
                "INSERT INTO messages (sender_id, receiver_id, message, media_type, media_id) VALUES (?, ?, ?, ?, ?)",
                (user.id, target_user_id, message_text, media_type, media_id)
            )
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.execute(
                "UPDATE rankings SET sent_messages = sent_messages + 1 WHERE user_id = ?",
                (user.id,)
            )
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.execute(
                "UPDATE rankings SET received_messages = received_messages + 1 WHERE user_id = ?",
                (target_user_id,)
            )
            await db.commit()
        
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username} ({target_user_id}) –∞–Ω–æ–Ω–∏–º–Ω–æ={anonymous}.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id} –∫ {target_user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# ==================== –ö–æ–º–∞–Ω–¥–∞ /reply ====================
async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /reply –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            SELECT sender_id, message FROM messages
            WHERE receiver_id = ?
            ORDER BY timestamp DESC
            LIMIT 1
        ''', (user.id,))
        last_message = await cursor.fetchone()
        if not last_message:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return ConversationHandler.END
        sender_id, message = last_message
        context.user_data['reply_to_user_id'] = sender_id
        await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç):")
        return REPLY_MESSAGE

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –û—Ç–≤–µ—Ç–∞ –Ω–∞ –°–æ–æ–±—â–µ–Ω–∏–µ ====================
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user = update.message.from_user
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ (caption)
    message_text = (update.message.text or update.message.caption or "").strip()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞
    has_media = False
    if update.message.photo or update.message.video or update.message.document or update.message.voice or update.message.video_note:
        has_media = True
    
    if not message_text and not has_media:
        await update.message.reply_text("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞.")
        return REPLY_MESSAGE
    
    if message_text:
        if not is_valid_message(message_text):
            await update.message.reply_text("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.")
            return REPLY_MESSAGE
    
    target_user_id = context.user_data.get('reply_to_user_id')
    if not target_user_id:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT anonymous_mode, username FROM users WHERE user_id = ?", (user.id,))
        user_mode = await cursor.fetchone()
        if not user_mode:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return ConversationHandler.END
        anonymous = bool(user_mode[0])
        username = user_mode[1]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT username, show_username FROM users WHERE user_id = ?", (target_user_id,))
        target_info = await cursor.fetchone()
        if not target_info:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return ConversationHandler.END
        target_username, show_username = target_info
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT * FROM blocks WHERE blocked_user_id = ? AND blocked_by = ?", (user.id, target_user_id))
        is_blocked = await cursor.fetchone()
        if is_blocked:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.")
            return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    media_type = None
    media_id = None
    if update.message.photo:
        media_type = 'photo'
        media_id = update.message.photo[-1].file_id  # –°–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    elif update.message.document:
        media_type = 'document'
        media_id = update.message.document.file_id
    elif update.message.video:
        media_type = 'video'
        media_id = update.message.video.file_id
    elif update.message.voice:
        media_type = 'voice'
        media_id = update.message.voice.file_id
    elif update.message.video_note:
        media_type = 'video_note'
        media_id = update.message.video_note.file_id
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç
    # –ß–∏—Ç–∞–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã /send_anonymous, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    send_anonymous = context.user_data.get('send_anonymous', False)
    if send_anonymous:
        anonymous = True
        context.user_data['send_anonymous'] = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ display_name
    if anonymous:
        display_name = "üï∂Ô∏è –ê–Ω–æ–Ω–∏–º"
    else:
        display_name = username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if media_type and media_id:
            if media_type == 'photo':
                sent_message = await context.bot.send_photo(
                    chat_id=target_user_id,
                    photo=media_id,
                    caption=f"<b>üì© –û—Ç–≤–µ—Ç –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'document':
                sent_message = await context.bot.send_document(
                    chat_id=target_user_id,
                    document=media_id,
                    caption=f"<b>üì© –û—Ç–≤–µ—Ç –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'video':
                sent_message = await context.bot.send_video(
                    chat_id=target_user_id,
                    video=media_id,
                    caption=f"<b>üì© –û—Ç–≤–µ—Ç –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'voice':
                sent_message = await context.bot.send_voice(
                    chat_id=target_user_id,
                    voice=media_id,
                    caption=f"<b>üì© –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            elif media_type == 'video_note':
                sent_message = await context.bot.send_video_note(
                    chat_id=target_user_id,
                    video_note=media_id,
                    caption=f"<b>üì© –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name}:</b>\n\n{message_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                    ])
                )
            # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
        else:
            sent_message = await context.bot.send_message(
                chat_id=target_user_id,
                text=f"<b>üì© –û—Ç–≤–µ—Ç –æ—Ç {display_name}:</b>\n\n{message_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
                ])
            )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("PRAGMA foreign_keys = ON;")
            await db.execute(
                "INSERT INTO messages (sender_id, receiver_id, message, media_type, media_id) VALUES (?, ?, ?, ?, ?)",
                (user.id, target_user_id, message_text, media_type, media_id)
            )
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.execute(
                "UPDATE rankings SET sent_messages = sent_messages + 1 WHERE user_id = ?",
                (user.id,)
            )
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.execute(
                "UPDATE rankings SET received_messages = received_messages + 1 WHERE user_id = ?",
                (target_user_id,)
            )
            await db.commit()
        
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username} ({target_user_id}) –∞–Ω–æ–Ω–∏–º–Ω–æ={anonymous}.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {user.id} –∫ {target_user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –û—Ç–≤–µ—Ç–∞ ====================
async def handle_reply_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    query = update.callback_query
    if query is None:
        return ConversationHandler.END
    
    await query.answer()
    
    data = query.data
    if not data.startswith('reply_'):
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END
    
    target_user_id = int(data.split('reply_')[1])
    context.user_data['reply_to_user_id'] = target_user_id
    await query.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç):")
    return REPLY_MESSAGE

# ==================== –ö–æ–º–∞–Ω–¥–∞ /set_mode ====================
async def set_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /set_mode –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìù –ù–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π", callback_data='mode_non_anonymous')],
        [InlineKeyboardButton("üï∂Ô∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π", callback_data='mode_anonymous')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=reply_markup)
    return SET_MODE

# ==================== –ö–æ–º–∞–Ω–¥–∞ /toggle_profile_visibility ====================
async def toggle_profile_visibility_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /toggle_profile_visibility –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT profile_visible FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return ConversationHandler.END
        profile_visible = bool(result[0])
    
    if profile_visible:
        # –ü—Ä–æ—Ñ–∏–ª—å –≤–∏–¥–∏–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫—Ä—ã—Ç—å
        keyboard = [
            [InlineKeyboardButton("üîí –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='hide_profile')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        status = "‚ú® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **–≤–∏–¥–∏–º**. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –µ–≥–æ —Å–∫—Ä—ã—Ç—å?"
    else:
        # –ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å
        keyboard = [
            [InlineKeyboardButton("üîì –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='show_profile')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        status = "‚ú® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **—Å–∫—Ä—ã—Ç**. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å?"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(status, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    return TOGGLE_PROFILE_VISIBILITY

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–æ–∫ –¥–ª—è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–∏–¥–∏–º–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∏–ª—è ====================
async def handle_toggle_profile_visibility_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    if query is None:
        return ConversationHandler.END
    
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    if data == 'hide_profile':
        new_visibility = 0
        status = "üîí –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    elif data == 'show_profile':
        new_visibility = 1
        status = "üîì –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    elif data == 'cancel':
        await query.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END
    else:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await db.execute("UPDATE users SET profile_visible = ? WHERE user_id = ?", (new_visibility, user.id))
        await db.commit()
    
    await query.message.reply_text(status)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–∑–º–µ–Ω–∏–ª –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ {new_visibility}.")
    return ConversationHandler.END

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –ü—Ä–æ—Ñ–∏–ª—è ====================
async def handle_view_profile_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    if query is None:
        return
    
    await query.answer()
    
    data = query.data
    if not data.startswith('view_'):
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    target_user_id = int(data.split('view_')[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username, interests, show_username, profile_photo FROM users WHERE user_id = ?", (target_user_id,))
        target_info = await cursor.fetchone()
        if not target_info:
            await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç.")
            return
        target_username, interests, show_username, profile_photo = target_info
        if not show_username:
            display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}"
        else:
            display_name = target_username
        interests = interests if interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        photo_text = f"üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –î–∞" if profile_photo else "üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –ù–µ—Ç"
    
    profile_message = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üîπ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {display_name}\n"
        f"üîπ <b>ID:</b> {target_user_id}\n"
        f"üîπ <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {interests}\n"
        f"{photo_text}\n\n"
        f"üì¨ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /send –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
    )
    
    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_{target_user_id}")],
        [InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_{target_user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if profile_photo:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –Ω–∞–ø—Ä—è–º—É—é
        try:
            await query.message.reply_photo(
                photo=profile_photo,
                caption=profile_message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
            await query.message.reply_text(profile_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await query.message.reply_text(profile_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /list ====================
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT user_id, username, show_username FROM users WHERE profile_visible = 1")
        users_list = await cursor.fetchall()
        if not users_list:
            await update.message.reply_text("üìã –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
    
        response = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for user in users_list:
            user_id, username, show_username = user
            if show_username:
                display_name = username
            else:
                display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            response += f"{display_name}\n"
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /list –≤—ã–∑–≤–∞–Ω–∞.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /view_profile ====================
async def view_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /view_profile –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(
        "üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=await get_users_keyboard(exclude_user_id=update.message.from_user.id)
    )

# ==================== –ö–æ–º–∞–Ω–¥–∞ /info ====================
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username, interests, anonymous_mode, show_username, profile_photo, profile_visible FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        username, interests, anonymous_mode, show_username, profile_photo, profile_visible = result
        interests = interests if interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        mode_text = "üï∂Ô∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π" if anonymous_mode else "üìù –ù–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π"
        visibility = "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å" if show_username else "‚ùå –°–∫—Ä—ã–≤–∞—Ç—å"
        profile_status = "‚úÖ –í–∏–¥–∏–º" if profile_visible else "‚ùå –°–∫—Ä—ã—Ç"
        photo_text = f"üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –î–∞" if profile_photo else "üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: –ù–µ—Ç"
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute('''
            SELECT sent_messages, received_messages, likes, dislikes FROM rankings WHERE user_id = ?
        ''', (user.id,))
        rank_info = await cursor.fetchone()
        sent = rank_info[0] if rank_info else 0
        received = rank_info[1] if rank_info else 0
        likes = rank_info[2] if rank_info else 0
        dislikes = rank_info[3] if rank_info else 0
    
    profile_message = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üîπ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {username}\n"
        f"üîπ <b>ID:</b> {user.id}\n"
        f"üîπ <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {interests}\n"
        f"üîπ <b>–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {mode_text}\n"
        f"üîπ <b>–í–∏–¥–∏–º–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞:</b> {visibility}\n"
        f"üîπ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è:</b> {profile_status}\n"
        f"{photo_text}\n\n"
        f"üìà <b>–†–µ–π—Ç–∏–Ω–≥:</b>\n"
        f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent}\n"
        f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {received}\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {likes}\n"
        f"‚ùå –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
    )
    
    if profile_photo:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –Ω–∞–ø—Ä—è–º—É—é
        try:
            await update.message.reply_photo(
                photo=profile_photo,
                caption=profile_message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
            await update.message.reply_text(profile_message, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(profile_message, parse_mode=ParseMode.HTML)
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /info –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} ({user.id}).")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /delete ====================
async def delete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        username = result[0]
        await db.execute("DELETE FROM users WHERE user_id = ?", (user.id,))
        await db.execute("DELETE FROM messages WHERE sender_id = ? OR receiver_id = ?", (user.id, user.id))
        await db.execute("DELETE FROM rankings WHERE user_id = ?", (user.id,))
        await db.execute("DELETE FROM matches WHERE user1_id = ? OR user2_id = ?", (user.id, user.id))
        await db.execute("DELETE FROM blocks WHERE blocked_user_id = ? OR blocked_by = ?", (user.id, user.id))
        await db.execute("DELETE FROM likes WHERE liker_id = ? OR liked_id = ?", (user.id, user.id))
        await db.commit()
    await update.message.reply_text(f"‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ({username}) –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user.id}) —É–¥–∞–ª–∏–ª —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /help ====================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/send - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/send_anonymous - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/set_mode - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω–æ–Ω–∏–º–Ω—ã–π/–Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π)\n"
        "/set_username_visibility - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞\n"
        "/toggle_profile_visibility - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/set_profile_photo - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/view_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/rankings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/myrank - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö/–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/add_interests –∏–Ω—Ç–µ—Ä–µ—Å1, –∏–Ω—Ç–µ—Ä–µ—Å2 - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n"
        "/search –∏–Ω—Ç–µ—Ä–µ—Å - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "/match - –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤\n"
        "/block @username - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/report @username –ø—Ä–∏—á–∏–Ω–∞ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unblock @username - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/like @username - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/dislike @username - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–∑–≤–∞–Ω–∞.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /add_interests ====================
async def add_interests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã."""
    user = update.message.from_user
    interests = ' '.join(context.args)
    
    if not interests:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/add_interests –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return
        username = result[0]
        await db.execute("UPDATE users SET interests = ? WHERE user_id = ?", (interests, user.id))
        await db.commit()
    
    await update.message.reply_text(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {interests}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user.id}) –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests}")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /search ====================
async def search_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º."""
    query = ' '.join(context.args).lower()
    if not query:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä:\n/search –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        cursor = await db.execute("SELECT username, interests FROM users WHERE LOWER(interests) LIKE ? AND profile_visible = 1", (f"%{query}%",))
        results = await cursor.fetchall()
    
    if not results:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    response = "üîç <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n"
    for username, interests in results:
        response += f"{username} - {interests}\n"
    
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∏—Å–∫–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {query}")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /rankings ====================
async def rankings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor = await db.execute('''
            SELECT users.username, rankings.sent_messages
            FROM users
            JOIN rankings ON users.user_id = rankings.user_id
            WHERE users.profile_visible = 1
            ORDER BY rankings.sent_messages DESC
            LIMIT 10
        ''')
        rankings = await cursor.fetchall()
    
    if not rankings or all(sent == 0 for _, sent in rankings):
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return
    
    ranking_text = "üèÜ <b>–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
    for idx, (username, sent) in enumerate(rankings, start=1):
        ranking_text += f"{idx}. {username} - {sent} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(ranking_text, parse_mode=ParseMode.HTML)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /rankings –≤—ã–∑–≤–∞–Ω–∞.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /myrank ====================
async def my_rank_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT sent_messages, received_messages, likes, dislikes FROM rankings WHERE user_id = ?", (user.id,))
        rank_info = await cursor.fetchone()
        if not rank_info:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        sent, received, likes, dislikes = rank_info
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute('''
            SELECT COUNT(*) + 1 FROM rankings
            JOIN users ON users.user_id = rankings.user_id
            WHERE rankings.sent_messages > ?
              AND users.profile_visible = 1
        ''', (sent,))
        rank = await cursor.fetchone()
        rank = rank[0] if rank else "–ù–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω"
    
    await update.message.reply_text(
        f"üèÖ <b>–í–∞—à —Ä–∞–Ω–≥:</b> {rank}\nüí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {sent}\nüì• <b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {received}\n‚ù§Ô∏è <b>–õ–∞–π–∫–æ–≤:</b> {likes}\n‚ùå <b>–î–∏–∑–ª–∞–π–∫–æ–≤:</b> {dislikes}",
        parse_mode=ParseMode.HTML
    )
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myrank –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /match ====================
async def match_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    user = update.message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT interests FROM users WHERE user_id = ?", (user.id,))
        result = await cursor.fetchone()
        if not result or not result[0]:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_interests –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
            return
        
        user_interests = set([interest.strip().lower() for interest in result[0].split(',')])
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
        cursor = await db.execute("SELECT user_id, username, interests FROM users WHERE user_id != ? AND profile_visible = 1", (user.id,))
        all_users = await cursor.fetchall()
        
        matches = []
        for other_user in all_users:
            other_user_id, other_username, other_interests = other_user
            if not other_interests:
                continue
            other_user_interests = set([interest.strip().lower() for interest in other_interests.split(',')])
            common_interests = user_interests.intersection(other_user_interests)
            if len(common_interests) >= 1:  # –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –æ–±—â–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å
                matches.append((other_user_id, other_username, len(common_interests)))
        
        if not matches:
            await update.message.reply_text("üîç –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        matches.sort(key=lambda x: x[2], reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ —Ç–æ–ø 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        top_matches = matches[:5]
        
        response = "üíñ <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å:</b>\n\n"
        for match in top_matches:
            match_id, match_username, common = match
            response += f"‚Ä¢ {match_username} (–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {common})\n"
        
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /block ====================
async def block_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä:\n/block @username")
        return
    
    target_username = context.args[0]
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT user_id FROM users WHERE username = ?", (target_username,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user_id = result[0]
        
        if target_user_id == user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫–∏
        await db.execute("INSERT OR IGNORE INTO blocks (blocked_user_id, blocked_by) VALUES (?, ?)", (target_user_id, user.id))
        await db.commit()
    
    await update.message.reply_text(f"üîí –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} ({target_username}).")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /report ====================
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã. –ü—Ä–∏–º–µ—Ä:\n/report @username –°–ø–∞–º")
        return
    
    target_username = context.args[0]
    reason = ' '.join(context.args[1:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT user_id FROM users WHERE username = ?", (target_username,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user_id = result[0]
        
        if target_user_id == user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        logger.info(f"–ñ–∞–ª–æ–±–∞ –æ—Ç {user.id} –Ω–∞ {target_user_id}: {reason}")
    
    await update.message.reply_text(f"üìå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∂–∞–ª–æ–±–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì¢ <b>–ñ–∞–ª–æ–±–∞</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} ({user.id}) –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} ({target_user_id}).\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ñ–∞–ª–æ–±–∞ –æ—Ç {user.id} –Ω–∞ {target_user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /unblock ====================
async def unblock_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä:\n/unblock @username")
        return
    
    target_username = context.args[0]
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT user_id FROM users WHERE username = ?", (target_username,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user_id = result[0]
        
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        cursor = await db.execute("SELECT * FROM blocks WHERE blocked_user_id = ? AND blocked_by = ?", (target_user_id, user.id))
        is_blocked = await cursor.fetchone()
        if not is_blocked:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        await db.execute("DELETE FROM blocks WHERE blocked_user_id = ? AND blocked_by = ?", (target_user_id, user.id))
        await db.commit()
    
    await update.message.reply_text(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMIN_ID} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} ({target_username}).")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /like ====================
async def like_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user = update.message.from_user
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∞–π–∫–∞. –ü—Ä–∏–º–µ—Ä:\n/like @username")
        return
    
    target_username = context.args[0]
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT user_id FROM users WHERE username = ?", (target_username,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user_id = result[0]
        
        if target_user_id == user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∂–µ –ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫
        cursor = await db.execute("SELECT like_type FROM likes WHERE liker_id = ? AND liked_id = ?", (user.id, target_user_id))
        existing = await cursor.fetchone()
        if existing:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        await db.execute("INSERT INTO likes (liker_id, liked_id, like_type) VALUES (?, ?, 'like')", (user.id, target_user_id))
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
        await db.execute("UPDATE rankings SET likes = likes + 1 WHERE user_id = ?", (target_user_id,))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cursor = await db.execute("SELECT like_type FROM likes WHERE liker_id = ? AND liked_id = ?", (target_user_id, user.id))
        mutual = await cursor.fetchone()
        if mutual and mutual[0] == 'like':
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á
            await db.execute("INSERT OR IGNORE INTO matches (user1_id, user2_id) VALUES (?, ?)", (min(user.id, target_user_id), max(user.id, target_user_id)))
            await db.commit()
            await update.message.reply_text(f"‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}. –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! üéâ")
            logger.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É {user.id} –∏ {target_user_id}.")
            return
        
        await db.commit()
    
    await update.message.reply_text(f"‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({target_username}).")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /dislike ====================
async def dislike_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user = update.message.from_user
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞. –ü—Ä–∏–º–µ—Ä:\n/dislike @username")
        return
    
    target_username = context.args[0]
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT user_id FROM users WHERE username = ?", (target_username,))
        result = await cursor.fetchone()
        if not result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        target_user_id = result[0]
        
        if target_user_id == user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∂–µ –ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫
        cursor = await db.execute("SELECT like_type FROM likes WHERE liker_id = ? AND liked_id = ?", (user.id, target_user_id))
        existing = await cursor.fetchone()
        if existing:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫
        await db.execute("INSERT INTO likes (liker_id, liked_id, like_type) VALUES (?, ?, 'dislike')", (user.id, target_user_id))
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–∏–∑–ª–∞–π–∫–æ–≤
        await db.execute("UPDATE rankings SET dislikes = dislikes + 1 WHERE user_id = ?", (target_user_id,))
        await db.commit()
    
    await update.message.reply_text(f"‚ùå –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({target_username}).")

# ==================== –ö–æ–º–∞–Ω–¥–∞ /set_profile_photo ====================
async def set_profile_photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
    return SET_PROFILE_PHOTO

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ü—Ä–æ—Ñ–∏–ª—è ====================
async def set_profile_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –∫–∞–∫ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è."""
    user = update.message.from_user
    if not update.message.photo:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return SET_PROFILE_PHOTO
    
    photo_file = update.message.photo[-1].file_id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞–∫ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
        await db.execute("UPDATE users SET profile_photo = ? WHERE user_id = ?", (photo_file, user.id))
        await db.commit()
    
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")
    return ConversationHandler.END

# ==================== –ì–ª–æ–±–∞–ª—å–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ ====================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(msg="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ==================== –ì–ª–∞–≤–Ω–∞—è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –§—É–Ω–∫—Ü–∏—è ====================
async def main_async():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è –∏ –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(TOKEN).build()
    
    # ==================== ConversationHandler –¥–ª—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====================
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register)],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
        # per_message=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å
    )
    
    # ==================== ConversationHandler –¥–ª—è –û—Ç–ø—Ä–∞–≤–∫–∏ –°–æ–æ–±—â–µ–Ω–∏–π ====================
    send_message_handler_conv = ConversationHandler(
        entry_points=[CommandHandler('send', send_message_command),
                      CommandHandler('send_anonymous', send_anonymous_message_command)],
        states={
            SELECT_RECIPIENT: [
                CallbackQueryHandler(handle_send_buttons, pattern=r'^send_\d+$'),
                CallbackQueryHandler(handle_view_profile_buttons, pattern=r'^view_\d+$'),
                CallbackQueryHandler(lambda update, context: update.callback_query.answer() or update.callback_query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä."), pattern=r'^no_users$')
            ],
            SEND_MESSAGE: [MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.VOICE | filters.VIDEO_NOTE & ~filters.COMMAND, send_message_handler)],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
        # per_message=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    
    # ==================== ConversationHandler –¥–ª—è –û—Ç–≤–µ—Ç–∞ ====================
    reply_handler_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_reply_buttons, pattern=r'^reply_\d+$'),
                      CommandHandler('reply', reply_command)],
        states={
            REPLY_MESSAGE: [MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.VOICE | filters.VIDEO_NOTE & ~filters.COMMAND, handle_reply)],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
        # per_message=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    
    # ==================== ConversationHandler –¥–ª—è –í–∏–¥–∏–º–æ—Å—Ç–∏ –Æ–∑–µ—Ä–Ω–µ–π–º–∞ ====================
    username_visibility_handler = ConversationHandler(
        entry_points=[CommandHandler('set_username_visibility', set_username_visibility_command)],
        states={
            SET_USERNAME_VISIBILITY: [CallbackQueryHandler(handle_username_visibility_buttons, pattern=r'^(show_username|hide_username)$')],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
        # per_message=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    
    # ==================== ConversationHandler –¥–ª—è –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ü—Ä–æ—Ñ–∏–ª—è ====================
    profile_photo_handler = ConversationHandler(
        entry_points=[CommandHandler('set_profile_photo', set_profile_photo_command)],
        states={
            SET_PROFILE_PHOTO: [MessageHandler(filters.PHOTO, set_profile_photo_handler)],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
    )
    
    # ==================== ConversationHandler –¥–ª—è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–∏–¥–∏–º–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∏–ª—è ====================
    toggle_profile_visibility_handler = ConversationHandler(
        entry_points=[CommandHandler('toggle_profile_visibility', toggle_profile_visibility_command)],
        states={
            TOGGLE_PROFILE_VISIBILITY: [CallbackQueryHandler(handle_toggle_profile_visibility_buttons, pattern=r'^(hide_profile|show_profile|cancel)$')],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω."))],
        per_user=True,
    )
    
    # ==================== CallbackQueryHandler –¥–ª—è set_mode ====================
    set_mode_handler = CallbackQueryHandler(handle_set_mode_buttons, pattern=r'^mode_')
    
    # ==================== CallbackQueryHandler –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è ====================
    view_profile_handler = CallbackQueryHandler(handle_view_profile_buttons, pattern=r'^view_\d+$')
    
    # ==================== CallbackQueryHandler –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ====================
    hide_profile_from_view_handler = CallbackQueryHandler(handle_hide_profile_from_view, pattern=r'^hide_profile_\d+$')
    
    # ==================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ====================
    application.add_handler(registration_handler)
    application.add_handler(send_message_handler_conv)
    application.add_handler(reply_handler_conv)
    application.add_handler(username_visibility_handler)
    application.add_handler(profile_photo_handler)
    application.add_handler(toggle_profile_visibility_handler)
    application.add_handler(set_mode_handler)
    application.add_handler(CommandHandler('list', list_users))
    application.add_handler(CommandHandler('view_profile', view_profile_command))
    application.add_handler(CommandHandler('info', info_command))
    application.add_handler(CommandHandler('delete', delete_registration))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('add_interests', add_interests))
    application.add_handler(CommandHandler('search', search_users))
    application.add_handler(CommandHandler('rankings', rankings_command))
    application.add_handler(CommandHandler('myrank', my_rank_command))
    application.add_handler(CommandHandler('match', match_command))
    application.add_handler(CommandHandler('block', block_command))
    application.add_handler(CommandHandler('report', report_command))
    application.add_handler(CommandHandler('unblock', unblock_command))
    application.add_handler(CommandHandler('like', like_command))
    application.add_handler(CommandHandler('dislike', dislike_command))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

# ==================== –ì–ª–∞–≤–Ω–∞—è –¢–æ—á–∫–∞ –í—Ö–æ–¥–∞ ====================
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é."""
    try:
        asyncio.run(main_async())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

if __name__ == '__main__':
    main()
